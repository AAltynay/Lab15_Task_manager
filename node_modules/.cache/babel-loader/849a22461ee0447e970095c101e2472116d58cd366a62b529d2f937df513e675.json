{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_TaskForm = _resolveComponent(\"TaskForm\");\n  const _component_Task = _resolveComponent(\"Task\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h1\", null, \"Список задач (\" + _toDisplayString($setup.totalTasks) + \")\", 1 /* TEXT */), _createVNode(_component_TaskForm, {\n    onAddTask: $setup.addTask\n  }, null, 8 /* PROPS */, [\"onAddTask\"]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.tasks, task => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: task.id\n    }, [_createVNode(_component_Task, {\n      task: task,\n      onRemoveTask: $setup.removeTask,\n      onToggleCompleted: $setup.toggleCompleted\n    }, null, 8 /* PROPS */, [\"task\", \"onRemoveTask\", \"onToggleCompleted\"])]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"p\", null, \"Выполненные задачи: \" + _toDisplayString($setup.completedTasks), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_toDisplayString","$setup","totalTasks","_createVNode","_component_TaskForm","onAddTask","addTask","_Fragment","_renderList","tasks","task","key","id","_component_Task","onRemoveTask","removeTask","onToggleCompleted","toggleCompleted","completedTasks"],"sources":["C:\\Users\\Acer\\task-manager\\src\\components\\TaskList.vue"],"sourcesContent":["<template> \r\n  <div> \r\n    <h1>Список задач ({{ totalTasks }})</h1> \r\n    <TaskForm @addTask=\"addTask\" /> \r\n    <div v-for=\"task in tasks\" :key=\"task.id\"> \r\n      <Task  \r\n        :task=\"task\"  \r\n        @removeTask=\"removeTask\"  \r\n        @toggleCompleted=\"toggleCompleted\"  \r\n      /> \r\n    </div> \r\n    <p>Выполненные задачи: {{ completedTasks }}</p> \r\n  </div> \r\n</template> \r\n \r\n<script> \r\nimport { ref, computed } from 'vue'; \r\nimport Task from './TaskT01.vue'; \r\nimport TaskForm from './TaskForm.vue'; \r\n \r\nexport default { \r\n  components: { Task, TaskForm }, \r\n  setup() { \r\n    const tasks = ref([]); \r\n     \r\n    const totalTasks = computed(() => tasks.value.length); \r\n    const completedTasks = computed(() => tasks.value.filter(task => task.completed).length); \r\n \r\n    const addTask = (newTask) => { \r\n      tasks.value.push({ ...newTask, id: Date.now(), completed: false }); \r\n    }; \r\n \r\n    const removeTask = (id) => { \r\n      tasks.value = tasks.value.filter(task => task.id !== id); \r\n    }; \r\n \r\n    const toggleCompleted = (id) => { \r\n      const task = tasks.value.find(task => task.id === id); \r\n      if (task) task.completed = !task.completed; \r\n    }; \r\n \r\n    return { tasks, totalTasks, completedTasks, addTask, removeTask, toggleCompleted }; \r\n  } \r\n}; \r\n</script>"],"mappings":";;;;uBACEA,mBAAA,CAWM,cAVJC,mBAAA,CAAwC,YAApC,gBAAc,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,UAAU,IAAG,GAAC,iBACnCC,YAAA,CAA+BC,mBAAA;IAApBC,SAAO,EAAEJ,MAAA,CAAAK;EAAO,yC,kBAC3BR,mBAAA,CAMMS,SAAA,QAVVC,WAAA,CAIwBP,MAAA,CAAAQ,KAAK,EAAbC,IAAI;yBAAhBZ,mBAAA,CAMM;MANsBa,GAAG,EAAED,IAAI,CAACE;QACpCT,YAAA,CAIEU,eAAA;MAHCH,IAAI,EAAEA,IAAI;MACVI,YAAU,EAAEb,MAAA,CAAAc,UAAU;MACtBC,iBAAe,EAAEf,MAAA,CAAAgB;;kCAGtBlB,mBAAA,CAA+C,WAA5C,sBAAoB,GAAAC,gBAAA,CAAGC,MAAA,CAAAiB,cAAc,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}